$prev = [
    %w[. . | # . . # . . . . . . # | . # . . # | # . | # # | . | . # # . | | . . | . | | . . . . # # # | .],
    %w[| | . | . . . . | # . # | . # . . . # . | . . . | # . # . # . # . . . . # . . . . . . # . . . . # .],
    %w[. . . # . . . | . . . . . # . # . . | # . . . | | . . # . | . | # . . . . # | # | . . # # . . . | .],
    %w[. . . . . # . . . . | # . | . . | . . . . . # | # # . . . # . # . # | | . . . . | | | | . . . . # .],
    %w[. . # # # . . . # . | | . | | | . # # . # . | . . . . | . # # . # . . . . | . # . | . . | . . . . .],
    %w[. . . . | . . # . # . | . . . | . . | . . . . . # . . . . # . # . . . . . . . | . | | . . . | . . .],
    %w[# . . | . . . . . # # | . . # . . # . . . # . . | . # # . . . . . # . . . . . . | | # # | . | # . .],
    %w[# # . . . . . . . . # . . . | # | . # # . # | # . . # | . . . # . . . # . # # | | | . # | | . . | |],
    %w[. . . . . . # . . | . . | . # . . . | # | | . # . . . . # . # . | # . | | . . . . . . | . . . . . |],
    %w[. | . . . | . # # . . . . # . | | . . . | . . | . . | . | . . . . . . . . # . # . . | | | . . | # #],
    %w[. . | . . . . | . . . # # # # # . . | # | . . | . . . # . . . # . | . . . | . . | . | . . | . # | #],
    %w[. . . . | . . . # . # . # . . . . . . . # . . . . . . # . # | . . . . . . # | . # # . . # # . # | .],
    %w[. . . . . | . # . . | # . . . | | . . # . . . . . . | . . # . | # . # | . . . # | . | . . # | | . .],
    %w[# . . . . # . . . . . . . | # . | . . | . . . # . . . | . . | . # # | # . | # . # | . . . . . | . .],
    %w[. . . . # . | | # . . . . . # . . # . . . | . . . . # # . # . . . . . . . # . | . | | | . | . . . .],
    %w[| . | . . | | # # . . . . | # . . # . . | . . | . | . | . . | | | . # # . . # . | . . . . . . # # |],
    %w[# # # . . | . # | # # | # . | | | . # | . # . . | # | . . # . . | . # | . . . . # . # . # . . | | .],
    %w[. | . . . . . | # . # . | # | | . . # . . . . . # . | . | | . # . | . . . . . | # . . | . . . # . .],
    %w[. . . # # . . . . . . . . . | . . . # . # | . . . . # # . . # . | . | . . . . . . . # . . | . . . |],
    %w[. . # . # . | . | . . . . . | | # . . | | . . . # # | | . # | . . | . . . . . # | . . . | . . . # |],
    %w[. . . . # . . . # | | . . | . . . | . | . . | # . # . . . . . . . . . | # . . . # . | | | . . . # .],
    %w[. # . . | . # # . | . | . # . . . # . . . . . # . # . . . . . . . | # . | . # | | # . # . . . . . #],
    %w[| . . . # | . . # . . . . # . . . | . # # . # # # # . . . . | # . # # | # . # . | . . . . . | | . .],
    %w[. . . . | . # . | # | | . . | # . | . | . # | . . . | . # . . . . | | . # . . . # | . # . . . | . #],
    %w[. | . . # . # . . | # | . . # # . . | . # # . . | | . . . # . . . | | . . . . # | | . . # . | . . .],
    %w[# # . . . . . . # . | . . . | . | | . # . | | . . . . | . . . . . . . # . . . . . . # # | # . . | .],
    %w[| # . . . . # | | . . . . # # . . . . . . . . . . . # . | . . . . | . . . . | # | # . | . . # . . .],
    %w[. . # . . . # | . . . . | . | . . | . . . # . . . . . . . # . # # . # . . . . . # . | | . . . . . .],
    %w[. . . | . . . . # | # . . # | . . . | . . . # | . . . . # . # | . . . . . . . | . . . . . . . | # .],
    %w[. # | | . . # # | | . | . . | . | # . . | . | . . . . | . # | . | . | . . . . . # . # . | . . # . #],
    %w[. . . . . | . . | . . . | . . . | . . . . . . | | . . . # # . . . . . # # . . . . . . . | . # . . |],
    %w[. . . . . # . . # | . # . . . # . . # . . . | | . | # # . . | # . . # # . | # . . . . . # # . . . .],
    %w[| . . . | . # | | . . . . . . . . . # . . # . . # | | | | . . . . | . . . | . . | . . # . . . # # .],
    %w[# . # . . | . | . . . . . . . | | . . | # | . . | . . . . | . | # | # | . | . . | . | . . . # . # .],
    %w[# . | . . | | # . | | | | . . # # # . | . . . . . . | . # | | | . # # . . . . . . . . | | . . . | |],
    %w[. . . . . # | . . # . # . . . . . | . . | # . . . . . | . . . . | . # | | | # . | . . . . . # . . .],
    %w[. . . | | # . . # . . . # . . . | | # . | | . . . . . . | # . . # . . # . | # . | # | . . . | . . #],
    %w[. | | . . . . . | | . . | # . | # | | . . . # # . . # # # | . # . . . . | . | . . | # . . . # | . |],
    %w[. . . # . | # | | . . # . | | | . . . . . . # . . . | | . # . . | | | . . | # . | . # # . . # . | #],
    %w[. # | | . . # . | | | . . . . . . . | . | # . . . . . | . | # . # . . # # . . | . | . . . . | # . .],
    %w[. . # . # # # . . | . . . . . . . . . | . . . . . # . . # # # | . | # . . . . . . . . . . # | . # |],
    %w[# . | | . | . # . | . . | | # | | | # . . # # . | # . . . . # . # . | . # . . . . . | . | . # . | #],
    %w[| . . | . . # . # . . | . # . . . . . . . # . . . # . | . . | . . | # . . | . . # # # | . | | . . |],
    %w[| . . | . . . | | . . . | . # . # . . # # | . # . . # . . . # | # . . | . # . . | . # . . | . | | .],
    %w[. . # . # # . . # . | . . # . # . . | . . | # . | | | . # . . # . . | # # # # # . | . . # . . . . .],
    %w[. | . | # . | # . . . | | . . # # . . . # | # . . . . . . . . . # . . . # | . . # # . # . # . . # .],
    %w[# # | . | . . # . # | . . . . # . . | . . # . . . . # . . . . . . # | | . | . . . . | | # # . . | |],
    %w[. # # | # . . . . # . . # . . # . . . . . # | . # . . . # . . # . | # | | | | . # # . # . . . . | .],
    %w[. . | . . . . . . . # | . . . . | # | . . | | . . # # . . # . | # | . . # . # | . . . . | . . # | #],
    %w[. . . . | | | . | | | # . . | | . . . | | | . # # . . # . # | # # . . . . | . . | . . | | . . # | #],
]
# $prev = [
# %w[. # . # . . . | # . ],
# %w[. . . . . # | # # | ],
# %w[. | . . | . . . # . ],
# %w[. . | # . . . . . # ],
# %w[# . # | | | # | # | ],
# %w[. . . # . | | . . . ],
# %w[. | . . . . | . . . ],
# %w[| | . . . # | . # | ],
# %w[| . | | | | . . | . ],
# %w[. . . # . | . . | . ]
# ]

$new = Marshal.load(Marshal.dump($prev))

def getSurroundingAcres(r, c)
    surrounding = []

    if r-1 >= 0
        surrounding << $prev[r-1][c-1] unless c-1 < 0
        surrounding << $prev[r-1][c]
        surrounding << $prev[r-1][c+1]
    end

    surrounding << $prev[r][c-1] unless c-1 < 0
    # ignoring $prev[r][c]
    surrounding << $prev[r][c+1]

    if $prev[r+1] != nil
        surrounding << $prev[r+1][c-1] unless c-1 < 0
        surrounding << $prev[r+1][c]
        surrounding << $prev[r+1][c+1]
    end

    surrounding
    # ^^ this gets returned since its the last value
end

10.times do |num|
    trees = 0
    lumber = 0
    $prev.each_with_index do |row, r|
        row.each_with_index do |char, c|
            surrounding = getSurroundingAcres(r, c)
            case char
            when "."
                $new[r][c] = "|" if surrounding.count("|") >= 3
            when "|"
                $new[r][c] = "#" if surrounding.count("#") >= 3
                trees += 1
            when "#"
                $new[r][c] = "." unless surrounding.include? "#" and surrounding.include? "|"
                lumber += 1
            else
                puts "if you're here you fucked up"
            end
        end
    end

    puts "iteration #{num}:"
    puts "trees: #{trees}"
    puts "lumber: #{lumber}"
    puts "score: #{trees * lumber}"
    puts

    $prev = Marshal.load(Marshal.dump($new))
end

trees = 0
lumber = 0
$new.count do |row|
    trees += row.count("|")
    lumber += row.count("#")
end

puts trees
puts lumber
puts trees * lumber
